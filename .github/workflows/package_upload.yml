name: CI/CT/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build PyPI package
      if: success()
      run: |
        python setup.py sdist bdist_wheel

    - name: Check if version exists on PyPI
      id: pypi_version_check
      run: |
        pip install requests
        PACKAGE_NAME="tensorflow-engram"
        VERSION=$(python setup.py --version)
        json=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/json)
        if echo "$json" | grep -q "\"$VERSION\":"; then
          echo "Version $VERSION already exists on PyPI."
          echo "::set-output name=exists::true"
        else
          echo "Version $VERSION does not exist on PyPI."
          echo "::set-output name=exists::false"
        fi

    - name: Publish to PyPI
      if: steps.pypi_version_check.outputs.exists == 'false'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        pip install twine
        twine upload dist/* --verbose

    # - name: Check if version exists on Conda
    #   id: conda_version_check
    #   run: |
    #     PACKAGE_NAME="tensorflow-engram"
    #     VERSION=$(python setup.py --version)
    #     ANACONDA_USER=${{ secrets.CONDA_USERNAME }}
    #     response=$(curl -s -o /dev/null -w "%{http_code}" https://anaconda.org/$ANACONDA_USER/$PACKAGE_NAME/$VERSION/download/linux-64/$PACKAGE_NAME-$VERSION.tar.bz2)
    #     if [ $response -eq 200 ]; then
    #       echo "Version $VERSION already exists on Conda."
    #       echo "::set-output name=exists::true"
    #     else
    #       echo "Version $VERSION does not exist on Conda."
    #       echo "::set-output name=exists::false"
    #     fi

    # - name: Set up Miniconda
    #   if: steps.conda_version_check.outputs.exists == 'false'
    #   uses: conda-incubator/setup-miniconda@v3
    #   with:
    #     python-version: 3.12
    #     auto-update-conda: true

    # - name: Install conda-build and anaconda-client
    #   if: steps.conda_version_check.outputs.exists == 'false'
    #   run: |
    #     conda install -y conda-build anaconda-client

    # - name: Build Conda package
    #   if: steps.conda_version_check.outputs.exists == 'false'
    #   shell: bash -l {0}
    #   run: |
    #     conda config --set anaconda_upload no
    #     source $(conda info --base)/etc/profile.d/conda.sh
    #     conda activate base
    #     conda-build . --output-folder build_output

    # - name: Publish to Conda
    #   if: steps.conda_version_check.outputs.exists == 'false'
    #   env:
    #     ANACONDA_API_TOKEN: ${{ secrets.CONDA_TOKEN }}
    #   run: |
    #     source $(conda info --base)/etc/profile.d/conda.sh
    #     conda activate base
    #     anaconda -t $ANACONDA_API_TOKEN upload build_output/**/tensorflow-engram-*.tar.bz2 --force
